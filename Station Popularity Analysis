{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8709919,"sourceType":"datasetVersion","datasetId":5224841}],"dockerImageVersionId":30732,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Station Popularity Analysis**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:31.058855Z","iopub.execute_input":"2024-06-30T12:04:31.059283Z","iopub.status.idle":"2024-06-30T12:04:31.064644Z","shell.execute_reply.started":"2024-06-30T12:04:31.059250Z","shell.execute_reply":"2024-06-30T12:04:31.063164Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"# Load the dataset\ndf = pd.read_csv('/kaggle/input/indian-railways-data/Train_details_22122017.csv', low_memory=False)\n\n# Display the first few rows of the dataset\nprint(df.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:32.470382Z","iopub.execute_input":"2024-06-30T12:04:32.470778Z","iopub.status.idle":"2024-06-30T12:04:32.872376Z","shell.execute_reply.started":"2024-06-30T12:04:32.470747Z","shell.execute_reply":"2024-06-30T12:04:32.871306Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"  Train No    Train Name SEQ Station Code  Station Name Arrival time  \\\n0      107  SWV-MAO-VLNK   1          SWV  SAWANTWADI R     00:00:00   \n1      107  SWV-MAO-VLNK   2         THVM        THIVIM     11:06:00   \n2      107  SWV-MAO-VLNK   3         KRMI       KARMALI     11:28:00   \n3      107  SWV-MAO-VLNK   4          MAO   MADGOAN JN.     12:10:00   \n4      108  VLNK-MAO-SWV   1          MAO   MADGOAN JN.     00:00:00   \n\n  Departure Time Distance Source Station Source Station Name  \\\n0       10:25:00        0            SWV     SAWANTWADI ROAD   \n1       11:08:00       32            SWV     SAWANTWADI ROAD   \n2       11:30:00       49            SWV     SAWANTWADI ROAD   \n3       00:00:00       78            SWV     SAWANTWADI ROAD   \n4       20:30:00        0            MAO         MADGOAN JN.   \n\n  Destination Station Destination Station Name  \n0                 MAO              MADGOAN JN.  \n1                 MAO              MADGOAN JN.  \n2                 MAO              MADGOAN JN.  \n3                 MAO              MADGOAN JN.  \n4                 SWV          SAWANTWADI ROAD  \n","output_type":"stream"}]},{"cell_type":"code","source":"#handling infinite values\ndf.replace([np.inf, -np.inf], np.nan, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:34.121644Z","iopub.execute_input":"2024-06-30T12:04:34.122052Z","iopub.status.idle":"2024-06-30T12:04:34.468137Z","shell.execute_reply.started":"2024-06-30T12:04:34.122013Z","shell.execute_reply":"2024-06-30T12:04:34.466954Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"# Check for missing values\nprint(df.isnull().sum())","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.116873Z","iopub.status.idle":"2024-06-30T12:04:06.117287Z","shell.execute_reply.started":"2024-06-30T12:04:06.117070Z","shell.execute_reply":"2024-06-30T12:04:06.117108Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Fill or drop missing values if necessary\ndf = df.dropna() ","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.119524Z","iopub.status.idle":"2024-06-30T12:04:06.120066Z","shell.execute_reply.started":"2024-06-30T12:04:06.119797Z","shell.execute_reply":"2024-06-30T12:04:06.119820Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Convert time columns to appropriate datetime format \ndf['Arrival time'] = pd.to_datetime(df['Arrival time'], format='%H:%M', errors='coerce').dt.time\ndf['Departure Time'] = pd.to_datetime(df['Departure Time'], format='%H:%M', errors='coerce').dt.time","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.121532Z","iopub.status.idle":"2024-06-30T12:04:06.122031Z","shell.execute_reply.started":"2024-06-30T12:04:06.121773Z","shell.execute_reply":"2024-06-30T12:04:06.121795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# To check for and handle any remaining NaT values in time columns\nprint(df[['Arrival time', 'Departure Time']].isnull().sum())\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.123283Z","iopub.status.idle":"2024-06-30T12:04:06.123787Z","shell.execute_reply.started":"2024-06-30T12:04:06.123544Z","shell.execute_reply":"2024-06-30T12:04:06.123564Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df.info())","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.125832Z","iopub.status.idle":"2024-06-30T12:04:06.126345Z","shell.execute_reply.started":"2024-06-30T12:04:06.126077Z","shell.execute_reply":"2024-06-30T12:04:06.126116Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Group data by Station Code and count the number of trains stopping at each station\nstation_popularity = df.groupby('Station Code').size().reset_index(name='Train Count')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.128803Z","iopub.status.idle":"2024-06-30T12:04:06.129333Z","shell.execute_reply.started":"2024-06-30T12:04:06.129078Z","shell.execute_reply":"2024-06-30T12:04:06.129114Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Display the first few rows of the processed data\nprint(station_popularity.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.130580Z","iopub.status.idle":"2024-06-30T12:04:06.131018Z","shell.execute_reply.started":"2024-06-30T12:04:06.130815Z","shell.execute_reply":"2024-06-30T12:04:06.130831Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Identify the top 10 busiest stations\ntop_10_stations = station_popularity.nlargest(10, 'Train Count')","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.135397Z","iopub.status.idle":"2024-06-30T12:04:06.135838Z","shell.execute_reply.started":"2024-06-30T12:04:06.135593Z","shell.execute_reply":"2024-06-30T12:04:06.135613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Calculate and visualize the distribution of trains across all stations\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.137215Z","iopub.status.idle":"2024-06-30T12:04:06.137559Z","shell.execute_reply.started":"2024-06-30T12:04:06.137396Z","shell.execute_reply":"2024-06-30T12:04:06.137410Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Bar chart for the top 10 busiest stations\nplt.figure(figsize=(12, 8))\nsns.barplot(data=top_10_stations, x='Station Code', y='Train Count')\nplt.title('Top 10 Busiest Stations')\nplt.xlabel('Station Code')\nplt.ylabel('Number of Trains')\nplt.xticks(rotation=45)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.139980Z","iopub.status.idle":"2024-06-30T12:04:06.140528Z","shell.execute_reply.started":"2024-06-30T12:04:06.140346Z","shell.execute_reply":"2024-06-30T12:04:06.140362Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Distribution of trains across all stations using a violin plot\nplt.figure(figsize=(12, 8))\nsns.violinplot(data=station_popularity, y='Train Count', inner='quartile')\nplt.title('Distribution of Trains Across All Stations')\nplt.ylabel('Number of Trains')\nplt.show()\n\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.142356Z","iopub.status.idle":"2024-06-30T12:04:06.142732Z","shell.execute_reply.started":"2024-06-30T12:04:06.142556Z","shell.execute_reply":"2024-06-30T12:04:06.142571Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Distribution of trains across all stations using a boxplot\nplt.figure(figsize=(12, 8))\nsns.boxplot(data=station_popularity, y='Train Count')\nplt.title('Distribution of Trains Across All Stations')\nplt.ylabel('Number of Trains')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.144231Z","iopub.status.idle":"2024-06-30T12:04:06.144591Z","shell.execute_reply.started":"2024-06-30T12:04:06.144420Z","shell.execute_reply":"2024-06-30T12:04:06.144435Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Group data by Station Code and count the number of trains stopping at each station\nstation_popularity = df.groupby('Station Code').size().reset_index(name='Train Count')\n\n# Find the station with the highest count\nmost_popular_station = station_popularity.loc[station_popularity['Train Count'].idxmax()]\n\n# Print the most popular station\nprint(\"Most popular station:\")\nprint(\"Station Code:\", most_popular_station['Station Code'])\nprint(\"Number of Trains:\", most_popular_station['Train Count'])\n","metadata":{"execution":{"iopub.status.busy":"2024-06-30T12:04:06.146983Z","iopub.status.idle":"2024-06-30T12:04:06.147370Z","shell.execute_reply.started":"2024-06-30T12:04:06.147191Z","shell.execute_reply":"2024-06-30T12:04:06.147207Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}